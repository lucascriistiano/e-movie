datatype ocupacao = liberar | reservar
datatype localCompra = local | internet

codsExibicoes = {1..2}
codsCadeiras = {1..5}

channel exibicao:Bool.codsExibicoes
channel compraFinalizada:codsExibicoes
channel cancelamentoFinalizado:codsExibicoes
channel cadeira : ocupacao.codsExibicoes.codsCadeiras
channel comprarLocal, comprarInternet, cancelar, trocar
channel operacaoInvalida

maximoOnline = 2

-- conjuntos de eventos
ECA = {| cadeira |}                                                              -- eventos de cadeiras
ESO = {| comprarInternet, comprarLocal,  exibicao, cadeira, compraFinalizada, cancelamentoFinalizado, trocar, cancelar |} -- eventos do sistema online
EXIB = {| exibicao.True, compraFinalizada, cancelamentoFinalizado |}   -- eventos de exibicao

CADEIRA(exib,num) = cadeira.reservar.exib.num -> cadeira.liberar.exib.num -> CADEIRA(exib,num)
CADEIRAS = ||| e:codsExibicoes, n:codsCadeiras @ CADEIRA(e, n)

-- processos para controle das exibicoes
EXIBICAO(num, ocupacao) = exibicao.True.num -> if(ocupacao == 0) then compraFinalizada.num -> EXIBICAO(num, ocupacao+1)
     else if(ocupacao < maximoOnline) then (compraFinalizada.num -> EXIBICAO(num, ocupacao+1)
            [] cancelamentoFinalizado.num -> EXIBICAO(num, ocupacao-1))
                else cancelamentoFinalizado.num -> EXIBICAO(num, ocupacao-1)
EXIBICOES = ||| i:codsExibicoes @ EXIBICAO(i,0)

-- processo de compra local
COMPRA_LOCAL = comprarLocal -> exibicao.False?x -> cadeira.reservar!x?y -> SISTEMA_ONLINE

-- processo de compra online
COMPRA = comprarInternet -> exibicao.True?x -> cadeira.reservar!x?y -> compraFinalizada.x -> SISTEMA_ONLINE

-- processo de cancelamento
CANCELAMENTO = cancelar -> exibicao.True?x -> cadeira.liberar!x?y -> cancelamentoFinalizado.x -> SISTEMA_ONLINE

-- processo de troca de ingresso
TROCA = trocar -> exibicao.False?x -> cadeira.liberar!x?y -> exibicao.False?x -> cadeira.reservar!x?y -> SISTEMA_ONLINE

-- processo de simulacao do sistema de vendas
SISTEMA_ONLINE = COMPRA_LOCAL
       [] CANCELAMENTO
       [] TROCA
       [] COMPRA

SISTEMA = (SISTEMA_ONLINE [ ESO || EXIB ] EXIBICOES) [ESO || ECA] CADEIRAS

-- verificacao se o sistema é liberar de deadlock
assert SISTEMA:[deadlock free]

-- ====================== ESPECIFICACOES ======================
-- processo RUN
RUN(A) = [] c:A @ c -> RUN(A)

-- processo CHAOS
CHAOS(A) = STOP |~| ([] x:A @ x -> CHAOS(A))

TE = {| exibicao, cadeira, comprarInternet, comprarLocal, cancelar, trocar, compraFinalizada, cancelamentoFinalizado |}   -- todos os eventos

-- especificação da ocupação de cadeiras
-- ECA = {| cadeira |}
TEMCA = {| exibicao, comprarInternet, comprarLocal, cancelar, trocar, compraFinalizada, cancelamentoFinalizado |}  -- todos os eventos menos os de cadeira
SPEC_CADEIRA = CADEIRAS [| ECA |] CHAOS(TE)

-- especificacao da compra local
ECL   = {| comprarLocal, exibicao.False, cadeira |}  -- eventos de compra local
TEMCL = {| comprarInternet, exibicao.True, cancelar, trocar, compraFinalizada, cancelamentoFinalizado |}   -- todos os eventos menos os de compra local
SPEC_COMPRA_LOCAL = comprarLocal -> exibicao.False?x -> cadeira.reservar!x?y -> SPEC_COMPRA_LOCAL
SPEC_COMPRA_LOCAL_C = SPEC_COMPRA_LOCAL [ ECL || TEMCL ] CHAOS(TEMCL)

-- especificacao da compra online
ECONL = {| comprarInternet, exibicao.True, cadeira, compraFinalizada |}  -- eventos da compra online limitada
TEMCONL = {| comprarLocal, exibicao.False, cancelar, trocar, cancelamentoFinalizado |}   -- todos os eventos menos os de compra online
SPEC_COMPRA = comprarInternet -> exibicao.True?x -> cadeira.reservar!x?y -> compraFinalizada.x -> SPEC_COMPRA
SPEC_COMPRA_C = SPEC_COMPRA [ ECONL || TEMCONL ] CHAOS(TEMCONL)

-- especificacao de cancelar
ECAN = {| cancelar, exibicao.True, cadeira, cancelamentoFinalizado |}  -- eventos de cancelamento
TEMCAN = {| comprarInternet, exibicao.False, comprarLocal, cancelar, trocar, compraFinalizada |}   -- todos os eventos menos os de cancelamento
SPEC_CANCELAMENTO = cancelar -> exibicao.True?x -> cadeira.liberar!x?y -> SPEC_CANCELAMENTO
SPEC_CANCELAMENTO_C = SPEC_CANCELAMENTO [ ECAN || TEMCAN ] CHAOS(TEMCAN)

-- especificacao de trocar
ETR = {| trocar, exibicao.False, cadeira |}  -- eventos de troca
TEMTR = {| comprarInternet, exibicao.True, comprarLocal, cancelar, compraFinalizada, cancelamentoFinalizado |}   -- todos os eventos menos os de troca
SPEC_TROCA = trocar -> exibicao.False?x -> cadeira.liberar!x?y -> exibicao.False?x -> cadeira.reservar!x?y -> SPEC_TROCA
SPEC_TROCA_C = SPEC_TROCA [ ETR || TEMTR ] CHAOS(TEMTR)

-- especificacao final
-- FINAL_SPEC =  (((SPEC_COMPRA_LOCAL_C [||] SPEC_COMPRA_C) [||] SPEC_CANCELAMENTO_C) [||] SPEC_TROCA_C) [| TE |] SPEC_CADEIRA
FINAL_SPEC =  (((SPEC_COMPRA_LOCAL_C [| ECA |] SPEC_COMPRA_C) [| ECA |] SPEC_CANCELAMENTO_C) [| ECA |] SPEC_TROCA_C) [| ECA |] SPEC_CADEIRA
-- FINAL_SPEC =  (SPEC_COMPRA_LOCAL [ {| comprarInternet |} || {| comprarInternet |} ] SPEC_COMPRA ||| SPEC_CANCELAMENTO ||| SPEC_TROCA) [| TE |] SPEC_CADEIRA


-- Verificações de refinamentos
assert SPEC_CADEIRA [T= SISTEMA
assert SPEC_CADEIRA [F= SISTEMA
assert SPEC_CADEIRA [FD= SISTEMA
